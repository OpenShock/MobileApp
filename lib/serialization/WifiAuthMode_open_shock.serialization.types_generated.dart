// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library open_shock.serialization.types;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class WifiAuthMode {
  final int value;
  const WifiAuthMode._(this.value);

  factory WifiAuthMode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum WifiAuthMode');
    }
    return result;
  }

  static WifiAuthMode? _createOrNull(int? value) => 
      value == null ? null : WifiAuthMode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 9;
  static bool containsValue(int value) => values.containsKey(value);

  static const WifiAuthMode Open = WifiAuthMode._(0);
  static const WifiAuthMode WEP = WifiAuthMode._(1);
  static const WifiAuthMode WPA_PSK = WifiAuthMode._(2);
  static const WifiAuthMode WPA2_PSK = WifiAuthMode._(3);
  static const WifiAuthMode WPA_WPA2_PSK = WifiAuthMode._(4);
  static const WifiAuthMode WPA2_ENTERPRISE = WifiAuthMode._(5);
  static const WifiAuthMode WPA3_PSK = WifiAuthMode._(6);
  static const WifiAuthMode WPA2_WPA3_PSK = WifiAuthMode._(7);
  static const WifiAuthMode WAPI_PSK = WifiAuthMode._(8);
  static const WifiAuthMode UNKNOWN = WifiAuthMode._(9);
  static const Map<int, WifiAuthMode> values = {
    0: Open,
    1: WEP,
    2: WPA_PSK,
    3: WPA2_PSK,
    4: WPA_WPA2_PSK,
    5: WPA2_ENTERPRISE,
    6: WPA3_PSK,
    7: WPA2_WPA3_PSK,
    8: WAPI_PSK,
    9: UNKNOWN};

  static const fb.Reader<WifiAuthMode> reader = _WifiAuthModeReader();

  @override
  String toString() {
    return 'WifiAuthMode{value: $value}';
  }
}

class _WifiAuthModeReader extends fb.Reader<WifiAuthMode> {
  const _WifiAuthModeReader();

  @override
  int get size => 1;

  @override
  WifiAuthMode read(fb.BufferContext bc, int offset) =>
      WifiAuthMode.fromValue(const fb.Uint8Reader().read(bc, offset));
}

