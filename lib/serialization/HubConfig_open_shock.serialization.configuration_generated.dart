// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library open_shock.serialization.configuration;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class OtaUpdateChannel {
  final int value;
  const OtaUpdateChannel._(this.value);

  factory OtaUpdateChannel.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OtaUpdateChannel');
    }
    return result;
  }

  static OtaUpdateChannel? _createOrNull(int? value) => 
      value == null ? null : OtaUpdateChannel.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const OtaUpdateChannel Stable = OtaUpdateChannel._(0);
  static const OtaUpdateChannel Beta = OtaUpdateChannel._(1);
  static const OtaUpdateChannel Develop = OtaUpdateChannel._(2);
  static const Map<int, OtaUpdateChannel> values = {
    0: Stable,
    1: Beta,
    2: Develop};

  static const fb.Reader<OtaUpdateChannel> reader = _OtaUpdateChannelReader();

  @override
  String toString() {
    return 'OtaUpdateChannel{value: $value}';
  }
}

class _OtaUpdateChannelReader extends fb.Reader<OtaUpdateChannel> {
  const _OtaUpdateChannelReader();

  @override
  int get size => 1;

  @override
  OtaUpdateChannel read(fb.BufferContext bc, int offset) =>
      OtaUpdateChannel.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class OtaUpdateStep {
  final int value;
  const OtaUpdateStep._(this.value);

  factory OtaUpdateStep.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OtaUpdateStep');
    }
    return result;
  }

  static OtaUpdateStep? _createOrNull(int? value) => 
      value == null ? null : OtaUpdateStep.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  static const OtaUpdateStep None = OtaUpdateStep._(0);
  static const OtaUpdateStep Updating = OtaUpdateStep._(1);
  static const OtaUpdateStep Updated = OtaUpdateStep._(2);
  static const OtaUpdateStep Validating = OtaUpdateStep._(3);
  static const OtaUpdateStep Validated = OtaUpdateStep._(4);
  static const OtaUpdateStep RollingBack = OtaUpdateStep._(5);
  static const Map<int, OtaUpdateStep> values = {
    0: None,
    1: Updating,
    2: Updated,
    3: Validating,
    4: Validated,
    5: RollingBack};

  static const fb.Reader<OtaUpdateStep> reader = _OtaUpdateStepReader();

  @override
  String toString() {
    return 'OtaUpdateStep{value: $value}';
  }
}

class _OtaUpdateStepReader extends fb.Reader<OtaUpdateStep> {
  const _OtaUpdateStepReader();

  @override
  int get size => 1;

  @override
  OtaUpdateStep read(fb.BufferContext bc, int offset) =>
      OtaUpdateStep.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Rfconfig {
  Rfconfig._(this._bc, this._bcOffset);
  factory Rfconfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Rfconfig> reader = _RfconfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The GPIO pin connected to the RF modulator's data pin for transmitting (TX)
  int get txPin => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  Whether to transmit keepalive messages to keep the shockers from entering sleep mode
  bool get keepaliveEnabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'Rfconfig{txPin: ${txPin}, keepaliveEnabled: ${keepaliveEnabled}}';
  }
}

class _RfconfigReader extends fb.TableReader<Rfconfig> {
  const _RfconfigReader();

  @override
  Rfconfig createObject(fb.BufferContext bc, int offset) => 
    Rfconfig._(bc, offset);
}

class RfconfigBuilder {
  RfconfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTxPin(int? txPin) {
    fbBuilder.addUint8(0, txPin);
    return fbBuilder.offset;
  }
  int addKeepaliveEnabled(bool? keepaliveEnabled) {
    fbBuilder.addBool(1, keepaliveEnabled);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RfconfigObjectBuilder extends fb.ObjectBuilder {
  final int? _txPin;
  final bool? _keepaliveEnabled;

  RfconfigObjectBuilder({
    int? txPin,
    bool? keepaliveEnabled,
  })
      : _txPin = txPin,
        _keepaliveEnabled = keepaliveEnabled;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _txPin);
    fbBuilder.addBool(1, _keepaliveEnabled);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EstopConfig {
  EstopConfig._(this._bc, this._bcOffset);
  factory EstopConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EstopConfig> reader = _EstopConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get enabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  ///  The GPIO pin connected to the E-Stop button
  int get gpioPin => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'EstopConfig{enabled: ${enabled}, gpioPin: ${gpioPin}}';
  }
}

class _EstopConfigReader extends fb.TableReader<EstopConfig> {
  const _EstopConfigReader();

  @override
  EstopConfig createObject(fb.BufferContext bc, int offset) => 
    EstopConfig._(bc, offset);
}

class EstopConfigBuilder {
  EstopConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addEnabled(bool? enabled) {
    fbBuilder.addBool(0, enabled);
    return fbBuilder.offset;
  }
  int addGpioPin(int? gpioPin) {
    fbBuilder.addUint8(1, gpioPin);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EstopConfigObjectBuilder extends fb.ObjectBuilder {
  final bool? _enabled;
  final int? _gpioPin;

  EstopConfigObjectBuilder({
    bool? enabled,
    int? gpioPin,
  })
      : _enabled = enabled,
        _gpioPin = gpioPin;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addBool(0, _enabled);
    fbBuilder.addUint8(1, _gpioPin);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WiFiCredentials {
  WiFiCredentials._(this._bc, this._bcOffset);
  factory WiFiCredentials(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WiFiCredentials> reader = _WiFiCredentialsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  ID of the WiFi network credentials, used for referencing the credentials with a low memory footprint
  int get id => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  SSID of the WiFi network
  String? get ssid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Password of the WiFi network
  String? get password => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'WiFiCredentials{id: ${id}, ssid: ${ssid}, password: ${password}}';
  }
}

class _WiFiCredentialsReader extends fb.TableReader<WiFiCredentials> {
  const _WiFiCredentialsReader();

  @override
  WiFiCredentials createObject(fb.BufferContext bc, int offset) => 
    WiFiCredentials._(bc, offset);
}

class WiFiCredentialsBuilder {
  WiFiCredentialsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int? id) {
    fbBuilder.addUint8(0, id);
    return fbBuilder.offset;
  }
  int addSsidOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPasswordOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WiFiCredentialsObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _ssid;
  final String? _password;

  WiFiCredentialsObjectBuilder({
    int? id,
    String? ssid,
    String? password,
  })
      : _id = id,
        _ssid = ssid,
        _password = password;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ssidOffset = _ssid == null ? null
        : fbBuilder.writeString(_ssid!);
    final int? passwordOffset = _password == null ? null
        : fbBuilder.writeString(_password!);
    fbBuilder.startTable(3);
    fbBuilder.addUint8(0, _id);
    fbBuilder.addOffset(1, ssidOffset);
    fbBuilder.addOffset(2, passwordOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WiFiConfig {
  WiFiConfig._(this._bc, this._bcOffset);
  factory WiFiConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WiFiConfig> reader = _WiFiConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Access point SSID
  String? get apSsid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Hub hostname
  String? get hostname => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  WiFi network credentials
  List<WiFiCredentials>? get credentials => const fb.ListReader<WiFiCredentials>(WiFiCredentials.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'WiFiConfig{apSsid: ${apSsid}, hostname: ${hostname}, credentials: ${credentials}}';
  }
}

class _WiFiConfigReader extends fb.TableReader<WiFiConfig> {
  const _WiFiConfigReader();

  @override
  WiFiConfig createObject(fb.BufferContext bc, int offset) => 
    WiFiConfig._(bc, offset);
}

class WiFiConfigBuilder {
  WiFiConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addApSsidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHostnameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCredentialsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WiFiConfigObjectBuilder extends fb.ObjectBuilder {
  final String? _apSsid;
  final String? _hostname;
  final List<WiFiCredentialsObjectBuilder>? _credentials;

  WiFiConfigObjectBuilder({
    String? apSsid,
    String? hostname,
    List<WiFiCredentialsObjectBuilder>? credentials,
  })
      : _apSsid = apSsid,
        _hostname = hostname,
        _credentials = credentials;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apSsidOffset = _apSsid == null ? null
        : fbBuilder.writeString(_apSsid!);
    final int? hostnameOffset = _hostname == null ? null
        : fbBuilder.writeString(_hostname!);
    final int? credentialsOffset = _credentials == null ? null
        : fbBuilder.writeList(_credentials!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, apSsidOffset);
    fbBuilder.addOffset(1, hostnameOffset);
    fbBuilder.addOffset(2, credentialsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CaptivePortalConfig {
  CaptivePortalConfig._(this._bc, this._bcOffset);
  factory CaptivePortalConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CaptivePortalConfig> reader = _CaptivePortalConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Whether the captive portal is forced to be enabled
  ///  The captive portal will otherwise shut down when a gateway connection is established
  bool get alwaysEnabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'CaptivePortalConfig{alwaysEnabled: ${alwaysEnabled}}';
  }
}

class _CaptivePortalConfigReader extends fb.TableReader<CaptivePortalConfig> {
  const _CaptivePortalConfigReader();

  @override
  CaptivePortalConfig createObject(fb.BufferContext bc, int offset) => 
    CaptivePortalConfig._(bc, offset);
}

class CaptivePortalConfigBuilder {
  CaptivePortalConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addAlwaysEnabled(bool? alwaysEnabled) {
    fbBuilder.addBool(0, alwaysEnabled);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CaptivePortalConfigObjectBuilder extends fb.ObjectBuilder {
  final bool? _alwaysEnabled;

  CaptivePortalConfigObjectBuilder({
    bool? alwaysEnabled,
  })
      : _alwaysEnabled = alwaysEnabled;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _alwaysEnabled);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class BackendConfig {
  BackendConfig._(this._bc, this._bcOffset);
  factory BackendConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BackendConfig> reader = _BackendConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Domain name of the backend server, e.g. "api.shocklink.net"
  String? get domain => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Authentication token for the backend server
  String? get authToken => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Override the Live-Control-Gateway (LCG) URL
  String? get lcgOverride => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'BackendConfig{domain: ${domain}, authToken: ${authToken}, lcgOverride: ${lcgOverride}}';
  }
}

class _BackendConfigReader extends fb.TableReader<BackendConfig> {
  const _BackendConfigReader();

  @override
  BackendConfig createObject(fb.BufferContext bc, int offset) => 
    BackendConfig._(bc, offset);
}

class BackendConfigBuilder {
  BackendConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addDomainOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAuthTokenOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLcgOverrideOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BackendConfigObjectBuilder extends fb.ObjectBuilder {
  final String? _domain;
  final String? _authToken;
  final String? _lcgOverride;

  BackendConfigObjectBuilder({
    String? domain,
    String? authToken,
    String? lcgOverride,
  })
      : _domain = domain,
        _authToken = authToken,
        _lcgOverride = lcgOverride;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? domainOffset = _domain == null ? null
        : fbBuilder.writeString(_domain!);
    final int? authTokenOffset = _authToken == null ? null
        : fbBuilder.writeString(_authToken!);
    final int? lcgOverrideOffset = _lcgOverride == null ? null
        : fbBuilder.writeString(_lcgOverride!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, domainOffset);
    fbBuilder.addOffset(1, authTokenOffset);
    fbBuilder.addOffset(2, lcgOverrideOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SerialInputConfig {
  SerialInputConfig._(this._bc, this._bcOffset);
  factory SerialInputConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SerialInputConfig> reader = _SerialInputConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Whether to echo typed characters back to the serial console
  bool get echoEnabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, true);

  @override
  String toString() {
    return 'SerialInputConfig{echoEnabled: ${echoEnabled}}';
  }
}

class _SerialInputConfigReader extends fb.TableReader<SerialInputConfig> {
  const _SerialInputConfigReader();

  @override
  SerialInputConfig createObject(fb.BufferContext bc, int offset) => 
    SerialInputConfig._(bc, offset);
}

class SerialInputConfigBuilder {
  SerialInputConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addEchoEnabled(bool? echoEnabled) {
    fbBuilder.addBool(0, echoEnabled);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SerialInputConfigObjectBuilder extends fb.ObjectBuilder {
  final bool? _echoEnabled;

  SerialInputConfigObjectBuilder({
    bool? echoEnabled,
  })
      : _echoEnabled = echoEnabled;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _echoEnabled);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateConfig {
  OtaUpdateConfig._(this._bc, this._bcOffset);
  factory OtaUpdateConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateConfig> reader = _OtaUpdateConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Indicates whether OTA updates are enabled.
  bool get isEnabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  ///  The domain name of the OTA Content Delivery Network (CDN).
  String? get cdnDomain => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The update channel to use.
  OtaUpdateChannel get updateChannel => OtaUpdateChannel.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 8, 0));
  ///  Indicates whether to check for updates on startup.
  bool get checkOnStartup => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  ///  Indicates whether to check for updates periodically.
  bool get checkPeriodically => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  ///  The interval in minutes between periodic update checks.
  int get checkInterval => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Indicates if the backend is authorized to manage the hub's update version on behalf of the user.
  bool get allowBackendManagement => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  ///  Indicates if manual approval via serial input or captive portal is required before installing updates.
  bool get requireManualApproval => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  ///  Update process ID, used to track the update process server-side across reboots.
  int get updateId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  Indicates what step of the update process the hub is currently in, used to detect failed updates for status reporting.
  OtaUpdateStep get updateStep => OtaUpdateStep.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 22, 0));

  @override
  String toString() {
    return 'OtaUpdateConfig{isEnabled: ${isEnabled}, cdnDomain: ${cdnDomain}, updateChannel: ${updateChannel}, checkOnStartup: ${checkOnStartup}, checkPeriodically: ${checkPeriodically}, checkInterval: ${checkInterval}, allowBackendManagement: ${allowBackendManagement}, requireManualApproval: ${requireManualApproval}, updateId: ${updateId}, updateStep: ${updateStep}}';
  }
}

class _OtaUpdateConfigReader extends fb.TableReader<OtaUpdateConfig> {
  const _OtaUpdateConfigReader();

  @override
  OtaUpdateConfig createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateConfig._(bc, offset);
}

class OtaUpdateConfigBuilder {
  OtaUpdateConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addIsEnabled(bool? isEnabled) {
    fbBuilder.addBool(0, isEnabled);
    return fbBuilder.offset;
  }
  int addCdnDomainOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUpdateChannel(OtaUpdateChannel? updateChannel) {
    fbBuilder.addUint8(2, updateChannel?.value);
    return fbBuilder.offset;
  }
  int addCheckOnStartup(bool? checkOnStartup) {
    fbBuilder.addBool(3, checkOnStartup);
    return fbBuilder.offset;
  }
  int addCheckPeriodically(bool? checkPeriodically) {
    fbBuilder.addBool(4, checkPeriodically);
    return fbBuilder.offset;
  }
  int addCheckInterval(int? checkInterval) {
    fbBuilder.addUint16(5, checkInterval);
    return fbBuilder.offset;
  }
  int addAllowBackendManagement(bool? allowBackendManagement) {
    fbBuilder.addBool(6, allowBackendManagement);
    return fbBuilder.offset;
  }
  int addRequireManualApproval(bool? requireManualApproval) {
    fbBuilder.addBool(7, requireManualApproval);
    return fbBuilder.offset;
  }
  int addUpdateId(int? updateId) {
    fbBuilder.addInt32(8, updateId);
    return fbBuilder.offset;
  }
  int addUpdateStep(OtaUpdateStep? updateStep) {
    fbBuilder.addUint8(9, updateStep?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateConfigObjectBuilder extends fb.ObjectBuilder {
  final bool? _isEnabled;
  final String? _cdnDomain;
  final OtaUpdateChannel? _updateChannel;
  final bool? _checkOnStartup;
  final bool? _checkPeriodically;
  final int? _checkInterval;
  final bool? _allowBackendManagement;
  final bool? _requireManualApproval;
  final int? _updateId;
  final OtaUpdateStep? _updateStep;

  OtaUpdateConfigObjectBuilder({
    bool? isEnabled,
    String? cdnDomain,
    OtaUpdateChannel? updateChannel,
    bool? checkOnStartup,
    bool? checkPeriodically,
    int? checkInterval,
    bool? allowBackendManagement,
    bool? requireManualApproval,
    int? updateId,
    OtaUpdateStep? updateStep,
  })
      : _isEnabled = isEnabled,
        _cdnDomain = cdnDomain,
        _updateChannel = updateChannel,
        _checkOnStartup = checkOnStartup,
        _checkPeriodically = checkPeriodically,
        _checkInterval = checkInterval,
        _allowBackendManagement = allowBackendManagement,
        _requireManualApproval = requireManualApproval,
        _updateId = updateId,
        _updateStep = updateStep;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? cdnDomainOffset = _cdnDomain == null ? null
        : fbBuilder.writeString(_cdnDomain!);
    fbBuilder.startTable(10);
    fbBuilder.addBool(0, _isEnabled);
    fbBuilder.addOffset(1, cdnDomainOffset);
    fbBuilder.addUint8(2, _updateChannel?.value);
    fbBuilder.addBool(3, _checkOnStartup);
    fbBuilder.addBool(4, _checkPeriodically);
    fbBuilder.addUint16(5, _checkInterval);
    fbBuilder.addBool(6, _allowBackendManagement);
    fbBuilder.addBool(7, _requireManualApproval);
    fbBuilder.addInt32(8, _updateId);
    fbBuilder.addUint8(9, _updateStep?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class HubConfig {
  HubConfig._(this._bc, this._bcOffset);
  factory HubConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HubConfig> reader = _HubConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  RF Transmitter configuration
  Rfconfig? get rf => Rfconfig.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ///  WiFi configuration
  WiFiConfig? get wifi => WiFiConfig.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ///  Captive portal configuration
  CaptivePortalConfig? get captivePortal => CaptivePortalConfig.reader.vTableGetNullable(_bc, _bcOffset, 8);
  ///  Backend configuration
  BackendConfig? get backend => BackendConfig.reader.vTableGetNullable(_bc, _bcOffset, 10);
  ///  Serial input configuration
  SerialInputConfig? get serialInput => SerialInputConfig.reader.vTableGetNullable(_bc, _bcOffset, 12);
  ///  OTA update configuration
  OtaUpdateConfig? get otaUpdate => OtaUpdateConfig.reader.vTableGetNullable(_bc, _bcOffset, 14);
  ///  E-Stop configuration
  EstopConfig? get estop => EstopConfig.reader.vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'HubConfig{rf: ${rf}, wifi: ${wifi}, captivePortal: ${captivePortal}, backend: ${backend}, serialInput: ${serialInput}, otaUpdate: ${otaUpdate}, estop: ${estop}}';
  }
}

class _HubConfigReader extends fb.TableReader<HubConfig> {
  const _HubConfigReader();

  @override
  HubConfig createObject(fb.BufferContext bc, int offset) => 
    HubConfig._(bc, offset);
}

class HubConfigBuilder {
  HubConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addRfOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addWifiOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCaptivePortalOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addBackendOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSerialInputOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addOtaUpdateOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addEstopOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HubConfigObjectBuilder extends fb.ObjectBuilder {
  final RfconfigObjectBuilder? _rf;
  final WiFiConfigObjectBuilder? _wifi;
  final CaptivePortalConfigObjectBuilder? _captivePortal;
  final BackendConfigObjectBuilder? _backend;
  final SerialInputConfigObjectBuilder? _serialInput;
  final OtaUpdateConfigObjectBuilder? _otaUpdate;
  final EstopConfigObjectBuilder? _estop;

  HubConfigObjectBuilder({
    RfconfigObjectBuilder? rf,
    WiFiConfigObjectBuilder? wifi,
    CaptivePortalConfigObjectBuilder? captivePortal,
    BackendConfigObjectBuilder? backend,
    SerialInputConfigObjectBuilder? serialInput,
    OtaUpdateConfigObjectBuilder? otaUpdate,
    EstopConfigObjectBuilder? estop,
  })
      : _rf = rf,
        _wifi = wifi,
        _captivePortal = captivePortal,
        _backend = backend,
        _serialInput = serialInput,
        _otaUpdate = otaUpdate,
        _estop = estop;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rfOffset = _rf?.getOrCreateOffset(fbBuilder);
    final int? wifiOffset = _wifi?.getOrCreateOffset(fbBuilder);
    final int? captivePortalOffset = _captivePortal?.getOrCreateOffset(fbBuilder);
    final int? backendOffset = _backend?.getOrCreateOffset(fbBuilder);
    final int? serialInputOffset = _serialInput?.getOrCreateOffset(fbBuilder);
    final int? otaUpdateOffset = _otaUpdate?.getOrCreateOffset(fbBuilder);
    final int? estopOffset = _estop?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, rfOffset);
    fbBuilder.addOffset(1, wifiOffset);
    fbBuilder.addOffset(2, captivePortalOffset);
    fbBuilder.addOffset(3, backendOffset);
    fbBuilder.addOffset(4, serialInputOffset);
    fbBuilder.addOffset(5, otaUpdateOffset);
    fbBuilder.addOffset(6, estopOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
