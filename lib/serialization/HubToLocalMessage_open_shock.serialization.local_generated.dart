// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library open_shock.serialization.local;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:open_shock/serialization/WifiNetworkEventType_open_shock.serialization.types_generated.dart';
import 'package:open_shock/serialization/WifiScanStatus_open_shock.serialization.types_generated.dart';

import './HubConfig_open_shock.serialization.configuration_generated.dart'
    as open_shock_serialization_configuration;
import './WifiNetworkEventType_open_shock.serialization.types_generated.dart'
    as open_shock_serialization_types;
import './WifiNetwork_open_shock.serialization.types_generated.dart'
    as open_shock_serialization_types;
import './WifiScanStatus_open_shock.serialization.types_generated.dart'
    as open_shock_serialization_types;

class AccountLinkResultCode {
  final int value;
  const AccountLinkResultCode._(this.value);

  factory AccountLinkResultCode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError(
          'Invalid value $value for bit flag enum AccountLinkResultCode');
    }
    return result;
  }

  static AccountLinkResultCode? _createOrNull(int? value) =>
      value == null ? null : AccountLinkResultCode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  static const AccountLinkResultCode Success = AccountLinkResultCode._(0);
  static const AccountLinkResultCode CodeRequired = AccountLinkResultCode._(1);
  static const AccountLinkResultCode InvalidCodeLength =
      AccountLinkResultCode._(2);
  static const AccountLinkResultCode NoInternetConnection =
      AccountLinkResultCode._(3);
  static const AccountLinkResultCode InvalidCode = AccountLinkResultCode._(4);
  static const AccountLinkResultCode InternalError = AccountLinkResultCode._(5);
  static const Map<int, AccountLinkResultCode> values = {
    0: Success,
    1: CodeRequired,
    2: InvalidCodeLength,
    3: NoInternetConnection,
    4: InvalidCode,
    5: InternalError
  };

  static const fb.Reader<AccountLinkResultCode> reader =
      _AccountLinkResultCodeReader();

  @override
  String toString() {
    return 'AccountLinkResultCode{value: $value}';
  }
}

class _AccountLinkResultCodeReader extends fb.Reader<AccountLinkResultCode> {
  const _AccountLinkResultCodeReader();

  @override
  int get size => 1;

  @override
  AccountLinkResultCode read(fb.BufferContext bc, int offset) =>
      AccountLinkResultCode.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class SetGpioresultCode {
  final int value;
  const SetGpioresultCode._(this.value);

  factory SetGpioresultCode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError(
          'Invalid value $value for bit flag enum SetGpioresultCode');
    }
    return result;
  }

  static SetGpioresultCode? _createOrNull(int? value) =>
      value == null ? null : SetGpioresultCode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const SetGpioresultCode Success = SetGpioresultCode._(0);
  static const SetGpioresultCode InvalidPin = SetGpioresultCode._(1);
  static const SetGpioresultCode InternalError = SetGpioresultCode._(2);
  static const Map<int, SetGpioresultCode> values = {
    0: Success,
    1: InvalidPin,
    2: InternalError
  };

  static const fb.Reader<SetGpioresultCode> reader = _SetGpioresultCodeReader();

  @override
  String toString() {
    return 'SetGpioresultCode{value: $value}';
  }
}

class _SetGpioresultCodeReader extends fb.Reader<SetGpioresultCode> {
  const _SetGpioresultCodeReader();

  @override
  int get size => 1;

  @override
  SetGpioresultCode read(fb.BufferContext bc, int offset) =>
      SetGpioresultCode.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class HubToLocalMessagePayloadTypeId {
  final int value;
  const HubToLocalMessagePayloadTypeId._(this.value);

  factory HubToLocalMessagePayloadTypeId.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError(
          'Invalid value $value for bit flag enum HubToLocalMessagePayloadTypeId');
    }
    return result;
  }

  static HubToLocalMessagePayloadTypeId? _createOrNull(int? value) =>
      value == null ? null : HubToLocalMessagePayloadTypeId.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 10;
  static bool containsValue(int value) => values.containsKey(value);

  static const HubToLocalMessagePayloadTypeId NONE =
      HubToLocalMessagePayloadTypeId._(0);
  static const HubToLocalMessagePayloadTypeId ReadyMessage =
      HubToLocalMessagePayloadTypeId._(1);
  static const HubToLocalMessagePayloadTypeId ErrorMessage =
      HubToLocalMessagePayloadTypeId._(2);
  static const HubToLocalMessagePayloadTypeId WifiScanStatusMessage =
      HubToLocalMessagePayloadTypeId._(3);
  static const HubToLocalMessagePayloadTypeId WifiNetworkEvent =
      HubToLocalMessagePayloadTypeId._(4);
  static const HubToLocalMessagePayloadTypeId WifiGotIpEvent =
      HubToLocalMessagePayloadTypeId._(5);
  static const HubToLocalMessagePayloadTypeId WifiLostIpEvent =
      HubToLocalMessagePayloadTypeId._(6);
  static const HubToLocalMessagePayloadTypeId AccountLinkCommandResult =
      HubToLocalMessagePayloadTypeId._(7);
  static const HubToLocalMessagePayloadTypeId SetRfTxPinCommandResult =
      HubToLocalMessagePayloadTypeId._(8);
  static const HubToLocalMessagePayloadTypeId SetEstopEnabledCommandResult =
      HubToLocalMessagePayloadTypeId._(9);
  static const HubToLocalMessagePayloadTypeId SetEstopPinCommandResult =
      HubToLocalMessagePayloadTypeId._(10);
  static const Map<int, HubToLocalMessagePayloadTypeId> values = {
    0: NONE,
    1: ReadyMessage,
    2: ErrorMessage,
    3: WifiScanStatusMessage,
    4: WifiNetworkEvent,
    5: WifiGotIpEvent,
    6: WifiLostIpEvent,
    7: AccountLinkCommandResult,
    8: SetRfTxPinCommandResult,
    9: SetEstopEnabledCommandResult,
    10: SetEstopPinCommandResult
  };

  static const fb.Reader<HubToLocalMessagePayloadTypeId> reader =
      _HubToLocalMessagePayloadTypeIdReader();

  @override
  String toString() {
    return 'HubToLocalMessagePayloadTypeId{value: $value}';
  }
}

class _HubToLocalMessagePayloadTypeIdReader
    extends fb.Reader<HubToLocalMessagePayloadTypeId> {
  const _HubToLocalMessagePayloadTypeIdReader();

  @override
  int get size => 1;

  @override
  HubToLocalMessagePayloadTypeId read(fb.BufferContext bc, int offset) =>
      HubToLocalMessagePayloadTypeId.fromValue(
          const fb.Uint8Reader().read(bc, offset));
}

class ReadyMessage {
  ReadyMessage._(this._bc, this._bcOffset);
  factory ReadyMessage(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReadyMessage> reader = _ReadyMessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get poggies => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  open_shock_serialization_types.WifiNetwork? get connectedWifi =>
      open_shock_serialization_types.WifiNetwork.reader
          .vTableGetNullable(_bc, _bcOffset, 6);
  bool get accountLinked =>
      const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  open_shock_serialization_configuration.HubConfig? get config =>
      open_shock_serialization_configuration.HubConfig.reader
          .vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ReadyMessage{poggies: ${poggies}, connectedWifi: ${connectedWifi}, accountLinked: ${accountLinked}, config: ${config}}';
  }
}

class _ReadyMessageReader extends fb.TableReader<ReadyMessage> {
  const _ReadyMessageReader();

  @override
  ReadyMessage createObject(fb.BufferContext bc, int offset) =>
      ReadyMessage._(bc, offset);
}

class ReadyMessageBuilder {
  ReadyMessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addPoggies(bool? poggies) {
    fbBuilder.addBool(0, poggies);
    return fbBuilder.offset;
  }

  int addConnectedWifiOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addAccountLinked(bool? accountLinked) {
    fbBuilder.addBool(2, accountLinked);
    return fbBuilder.offset;
  }

  int addConfigOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReadyMessageObjectBuilder extends fb.ObjectBuilder {
  final bool? _poggies;
  final open_shock_serialization_types.WifiNetworkObjectBuilder? _connectedWifi;
  final bool? _accountLinked;
  final open_shock_serialization_configuration.HubConfigObjectBuilder? _config;

  ReadyMessageObjectBuilder({
    bool? poggies,
    open_shock_serialization_types.WifiNetworkObjectBuilder? connectedWifi,
    bool? accountLinked,
    open_shock_serialization_configuration.HubConfigObjectBuilder? config,
  })  : _poggies = poggies,
        _connectedWifi = connectedWifi,
        _accountLinked = accountLinked,
        _config = config;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? connectedWifiOffset =
        _connectedWifi?.getOrCreateOffset(fbBuilder);
    final int? configOffset = _config?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addBool(0, _poggies);
    fbBuilder.addOffset(1, connectedWifiOffset);
    fbBuilder.addBool(2, _accountLinked);
    fbBuilder.addOffset(3, configOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ErrorMessage {
  ErrorMessage._(this._bc, this._bcOffset);
  factory ErrorMessage(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ErrorMessage> reader = _ErrorMessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ErrorMessage{message: ${message}}';
  }
}

class _ErrorMessageReader extends fb.TableReader<ErrorMessage> {
  const _ErrorMessageReader();

  @override
  ErrorMessage createObject(fb.BufferContext bc, int offset) =>
      ErrorMessage._(bc, offset);
}

class ErrorMessageBuilder {
  ErrorMessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ErrorMessageObjectBuilder extends fb.ObjectBuilder {
  final String? _message;

  ErrorMessageObjectBuilder({
    String? message,
  }) : _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class WifiScanStatusMessage {
  WifiScanStatusMessage._(this._bc, this._bcOffset);
  factory WifiScanStatusMessage(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiScanStatusMessage> reader =
      _WifiScanStatusMessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  WifiScanStatus get status => WifiScanStatus.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0));

  @override
  String toString() {
    return 'WifiScanStatusMessage{status: ${status}}';
  }
}

class _WifiScanStatusMessageReader
    extends fb.TableReader<WifiScanStatusMessage> {
  const _WifiScanStatusMessageReader();

  @override
  WifiScanStatusMessage createObject(fb.BufferContext bc, int offset) =>
      WifiScanStatusMessage._(bc, offset);
}

class WifiScanStatusMessageBuilder {
  WifiScanStatusMessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addStatus(WifiScanStatus? status) {
    fbBuilder.addUint8(0, status?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiScanStatusMessageObjectBuilder extends fb.ObjectBuilder {
  final WifiScanStatus? _status;

  WifiScanStatusMessageObjectBuilder({
    WifiScanStatus? status,
  }) : _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addUint8(0, _status?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class WifiNetworkEvent {
  WifiNetworkEvent._(this._bc, this._bcOffset);
  factory WifiNetworkEvent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiNetworkEvent> reader = _WifiNetworkEventReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  WifiNetworkEventType get eventType => WifiNetworkEventType.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  List<open_shock_serialization_types.WifiNetwork>? get networks =>
      const fb.ListReader<open_shock_serialization_types.WifiNetwork>(
              open_shock_serialization_types.WifiNetwork.reader)
          .vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'WifiNetworkEvent{eventType: ${eventType}, networks: ${networks}}';
  }
}

class _WifiNetworkEventReader extends fb.TableReader<WifiNetworkEvent> {
  const _WifiNetworkEventReader();

  @override
  WifiNetworkEvent createObject(fb.BufferContext bc, int offset) =>
      WifiNetworkEvent._(bc, offset);
}

class WifiNetworkEventBuilder {
  WifiNetworkEventBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addEventType(WifiNetworkEventType? eventType) {
    fbBuilder.addUint8(0, eventType?.value);
    return fbBuilder.offset;
  }

  int addNetworksOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiNetworkEventObjectBuilder extends fb.ObjectBuilder {
  final WifiNetworkEventType? _eventType;
  final List<open_shock_serialization_types.WifiNetworkObjectBuilder>?
      _networks;

  WifiNetworkEventObjectBuilder({
    WifiNetworkEventType? eventType,
    List<open_shock_serialization_types.WifiNetworkObjectBuilder>? networks,
  })  : _eventType = eventType,
        _networks = networks;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? networksOffset = _networks == null
        ? null
        : fbBuilder.writeList(
            _networks!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _eventType?.value);
    fbBuilder.addOffset(1, networksOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class WifiGotIpEvent {
  WifiGotIpEvent._(this._bc, this._bcOffset);
  factory WifiGotIpEvent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiGotIpEvent> reader = _WifiGotIpEventReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ip =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'WifiGotIpEvent{ip: ${ip}}';
  }
}

class _WifiGotIpEventReader extends fb.TableReader<WifiGotIpEvent> {
  const _WifiGotIpEventReader();

  @override
  WifiGotIpEvent createObject(fb.BufferContext bc, int offset) =>
      WifiGotIpEvent._(bc, offset);
}

class WifiGotIpEventBuilder {
  WifiGotIpEventBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiGotIpEventObjectBuilder extends fb.ObjectBuilder {
  final String? _ip;

  WifiGotIpEventObjectBuilder({
    String? ip,
  }) : _ip = ip;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ipOffset = _ip == null ? null : fbBuilder.writeString(_ip!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, ipOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class WifiLostIpEvent {
  WifiLostIpEvent._(this._bc, this._bcOffset);
  factory WifiLostIpEvent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiLostIpEvent> reader = _WifiLostIpEventReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ip =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'WifiLostIpEvent{ip: ${ip}}';
  }
}

class _WifiLostIpEventReader extends fb.TableReader<WifiLostIpEvent> {
  const _WifiLostIpEventReader();

  @override
  WifiLostIpEvent createObject(fb.BufferContext bc, int offset) =>
      WifiLostIpEvent._(bc, offset);
}

class WifiLostIpEventBuilder {
  WifiLostIpEventBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiLostIpEventObjectBuilder extends fb.ObjectBuilder {
  final String? _ip;

  WifiLostIpEventObjectBuilder({
    String? ip,
  }) : _ip = ip;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ipOffset = _ip == null ? null : fbBuilder.writeString(_ip!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, ipOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class AccountLinkCommandResult {
  AccountLinkCommandResult._(this._bc, this._bcOffset);
  factory AccountLinkCommandResult(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountLinkCommandResult> reader =
      _AccountLinkCommandResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  AccountLinkResultCode get result => AccountLinkResultCode.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0));

  @override
  String toString() {
    return 'AccountLinkCommandResult{result: ${result}}';
  }
}

class _AccountLinkCommandResultReader
    extends fb.TableReader<AccountLinkCommandResult> {
  const _AccountLinkCommandResultReader();

  @override
  AccountLinkCommandResult createObject(fb.BufferContext bc, int offset) =>
      AccountLinkCommandResult._(bc, offset);
}

class AccountLinkCommandResultBuilder {
  AccountLinkCommandResultBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addResult(AccountLinkResultCode? result) {
    fbBuilder.addUint8(0, result?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountLinkCommandResultObjectBuilder extends fb.ObjectBuilder {
  final AccountLinkResultCode? _result;

  AccountLinkCommandResultObjectBuilder({
    AccountLinkResultCode? result,
  }) : _result = result;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addUint8(0, _result?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SetRfTxPinCommandResult {
  SetRfTxPinCommandResult._(this._bc, this._bcOffset);
  factory SetRfTxPinCommandResult(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SetRfTxPinCommandResult> reader =
      _SetRfTxPinCommandResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get pin => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  SetGpioresultCode get result => SetGpioresultCode.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));

  @override
  String toString() {
    return 'SetRfTxPinCommandResult{pin: ${pin}, result: ${result}}';
  }
}

class _SetRfTxPinCommandResultReader
    extends fb.TableReader<SetRfTxPinCommandResult> {
  const _SetRfTxPinCommandResultReader();

  @override
  SetRfTxPinCommandResult createObject(fb.BufferContext bc, int offset) =>
      SetRfTxPinCommandResult._(bc, offset);
}

class SetRfTxPinCommandResultBuilder {
  SetRfTxPinCommandResultBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPin(int? pin) {
    fbBuilder.addUint8(0, pin);
    return fbBuilder.offset;
  }

  int addResult(SetGpioresultCode? result) {
    fbBuilder.addUint8(1, result?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SetRfTxPinCommandResultObjectBuilder extends fb.ObjectBuilder {
  final int? _pin;
  final SetGpioresultCode? _result;

  SetRfTxPinCommandResultObjectBuilder({
    int? pin,
    SetGpioresultCode? result,
  })  : _pin = pin,
        _result = result;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _pin);
    fbBuilder.addUint8(1, _result?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SetEstopEnabledCommandResult {
  SetEstopEnabledCommandResult._(this._bc, this._bcOffset);
  factory SetEstopEnabledCommandResult(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SetEstopEnabledCommandResult> reader =
      _SetEstopEnabledCommandResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get enabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  bool get success => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'SetEstopEnabledCommandResult{enabled: ${enabled}, success: ${success}}';
  }
}

class _SetEstopEnabledCommandResultReader
    extends fb.TableReader<SetEstopEnabledCommandResult> {
  const _SetEstopEnabledCommandResultReader();

  @override
  SetEstopEnabledCommandResult createObject(fb.BufferContext bc, int offset) =>
      SetEstopEnabledCommandResult._(bc, offset);
}

class SetEstopEnabledCommandResultBuilder {
  SetEstopEnabledCommandResultBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addEnabled(bool? enabled) {
    fbBuilder.addBool(0, enabled);
    return fbBuilder.offset;
  }

  int addSuccess(bool? success) {
    fbBuilder.addBool(1, success);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SetEstopEnabledCommandResultObjectBuilder extends fb.ObjectBuilder {
  final bool? _enabled;
  final bool? _success;

  SetEstopEnabledCommandResultObjectBuilder({
    bool? enabled,
    bool? success,
  })  : _enabled = enabled,
        _success = success;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addBool(0, _enabled);
    fbBuilder.addBool(1, _success);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SetEstopPinCommandResult {
  SetEstopPinCommandResult._(this._bc, this._bcOffset);
  factory SetEstopPinCommandResult(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SetEstopPinCommandResult> reader =
      _SetEstopPinCommandResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get gpioPin => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  SetGpioresultCode get result => SetGpioresultCode.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));

  @override
  String toString() {
    return 'SetEstopPinCommandResult{gpioPin: ${gpioPin}, result: ${result}}';
  }
}

class _SetEstopPinCommandResultReader
    extends fb.TableReader<SetEstopPinCommandResult> {
  const _SetEstopPinCommandResultReader();

  @override
  SetEstopPinCommandResult createObject(fb.BufferContext bc, int offset) =>
      SetEstopPinCommandResult._(bc, offset);
}

class SetEstopPinCommandResultBuilder {
  SetEstopPinCommandResultBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addGpioPin(int? gpioPin) {
    fbBuilder.addUint8(0, gpioPin);
    return fbBuilder.offset;
  }

  int addResult(SetGpioresultCode? result) {
    fbBuilder.addUint8(1, result?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SetEstopPinCommandResultObjectBuilder extends fb.ObjectBuilder {
  final int? _gpioPin;
  final SetGpioresultCode? _result;

  SetEstopPinCommandResultObjectBuilder({
    int? gpioPin,
    SetGpioresultCode? result,
  })  : _gpioPin = gpioPin,
        _result = result;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _gpioPin);
    fbBuilder.addUint8(1, _result?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class HubToLocalMessage {
  HubToLocalMessage._(this._bc, this._bcOffset);
  factory HubToLocalMessage(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HubToLocalMessage> reader = _HubToLocalMessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  HubToLocalMessagePayloadTypeId? get payloadType =>
      HubToLocalMessagePayloadTypeId._createOrNull(
          const fb.Uint8Reader().vTableGetNullable(_bc, _bcOffset, 4));
  dynamic get payload {
    switch (payloadType?.value) {
      case 1:
        return ReadyMessage.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 2:
        return ErrorMessage.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 3:
        return WifiScanStatusMessage.reader
            .vTableGetNullable(_bc, _bcOffset, 6);
      case 4:
        return WifiNetworkEvent.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 5:
        return WifiGotIpEvent.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 6:
        return WifiLostIpEvent.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 7:
        return AccountLinkCommandResult.reader
            .vTableGetNullable(_bc, _bcOffset, 6);
      case 8:
        return SetRfTxPinCommandResult.reader
            .vTableGetNullable(_bc, _bcOffset, 6);
      case 9:
        return SetEstopEnabledCommandResult.reader
            .vTableGetNullable(_bc, _bcOffset, 6);
      case 10:
        return SetEstopPinCommandResult.reader
            .vTableGetNullable(_bc, _bcOffset, 6);
      default:
        return null;
    }
  }

  @override
  String toString() {
    return 'HubToLocalMessage{payloadType: ${payloadType}, payload: ${payload}}';
  }
}

class _HubToLocalMessageReader extends fb.TableReader<HubToLocalMessage> {
  const _HubToLocalMessageReader();

  @override
  HubToLocalMessage createObject(fb.BufferContext bc, int offset) =>
      HubToLocalMessage._(bc, offset);
}

class HubToLocalMessageBuilder {
  HubToLocalMessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPayloadType(HubToLocalMessagePayloadTypeId? payloadType) {
    fbBuilder.addUint8(0, payloadType?.value);
    return fbBuilder.offset;
  }

  int addPayloadOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HubToLocalMessageObjectBuilder extends fb.ObjectBuilder {
  final HubToLocalMessagePayloadTypeId? _payloadType;
  final dynamic _payload;

  HubToLocalMessageObjectBuilder({
    HubToLocalMessagePayloadTypeId? payloadType,
    dynamic payload,
  })  : _payloadType = payloadType,
        _payload = payload;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? payloadOffset = _payload?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _payloadType?.value);
    fbBuilder.addOffset(1, payloadOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
