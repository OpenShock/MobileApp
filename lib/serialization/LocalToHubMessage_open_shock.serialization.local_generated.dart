// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library open_shock.serialization.local;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class LocalToHubMessagePayloadTypeId {
  final int value;
  const LocalToHubMessagePayloadTypeId._(this.value);

  factory LocalToHubMessagePayloadTypeId.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LocalToHubMessagePayloadTypeId');
    }
    return result;
  }

  static LocalToHubMessagePayloadTypeId? _createOrNull(int? value) => 
      value == null ? null : LocalToHubMessagePayloadTypeId.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 19;
  static bool containsValue(int value) => values.containsKey(value);

  static const LocalToHubMessagePayloadTypeId NONE = LocalToHubMessagePayloadTypeId._(0);
  static const LocalToHubMessagePayloadTypeId WifiScanCommand = LocalToHubMessagePayloadTypeId._(1);
  static const LocalToHubMessagePayloadTypeId WifiNetworkSaveCommand = LocalToHubMessagePayloadTypeId._(2);
  static const LocalToHubMessagePayloadTypeId WifiNetworkForgetCommand = LocalToHubMessagePayloadTypeId._(3);
  static const LocalToHubMessagePayloadTypeId WifiNetworkConnectCommand = LocalToHubMessagePayloadTypeId._(4);
  static const LocalToHubMessagePayloadTypeId WifiNetworkDisconnectCommand = LocalToHubMessagePayloadTypeId._(5);
  static const LocalToHubMessagePayloadTypeId OtaUpdateSetIsEnabledCommand = LocalToHubMessagePayloadTypeId._(6);
  static const LocalToHubMessagePayloadTypeId OtaUpdateSetDomainCommand = LocalToHubMessagePayloadTypeId._(7);
  static const LocalToHubMessagePayloadTypeId OtaUpdateSetUpdateChannelCommand = LocalToHubMessagePayloadTypeId._(8);
  static const LocalToHubMessagePayloadTypeId OtaUpdateSetCheckIntervalCommand = LocalToHubMessagePayloadTypeId._(9);
  static const LocalToHubMessagePayloadTypeId OtaUpdateSetAllowBackendManagementCommand = LocalToHubMessagePayloadTypeId._(10);
  static const LocalToHubMessagePayloadTypeId OtaUpdateSetRequireManualApprovalCommand = LocalToHubMessagePayloadTypeId._(11);
  static const LocalToHubMessagePayloadTypeId OtaUpdateHandleUpdateRequestCommand = LocalToHubMessagePayloadTypeId._(12);
  static const LocalToHubMessagePayloadTypeId OtaUpdateCheckForUpdatesCommand = LocalToHubMessagePayloadTypeId._(13);
  static const LocalToHubMessagePayloadTypeId OtaUpdateStartUpdateCommand = LocalToHubMessagePayloadTypeId._(14);
  static const LocalToHubMessagePayloadTypeId AccountLinkCommand = LocalToHubMessagePayloadTypeId._(15);
  static const LocalToHubMessagePayloadTypeId AccountUnlinkCommand = LocalToHubMessagePayloadTypeId._(16);
  static const LocalToHubMessagePayloadTypeId SetRfTxPinCommand = LocalToHubMessagePayloadTypeId._(17);
  static const LocalToHubMessagePayloadTypeId SetEstopEnabledCommand = LocalToHubMessagePayloadTypeId._(18);
  static const LocalToHubMessagePayloadTypeId SetEstopPinCommand = LocalToHubMessagePayloadTypeId._(19);
  static const Map<int, LocalToHubMessagePayloadTypeId> values = {
    0: NONE,
    1: WifiScanCommand,
    2: WifiNetworkSaveCommand,
    3: WifiNetworkForgetCommand,
    4: WifiNetworkConnectCommand,
    5: WifiNetworkDisconnectCommand,
    6: OtaUpdateSetIsEnabledCommand,
    7: OtaUpdateSetDomainCommand,
    8: OtaUpdateSetUpdateChannelCommand,
    9: OtaUpdateSetCheckIntervalCommand,
    10: OtaUpdateSetAllowBackendManagementCommand,
    11: OtaUpdateSetRequireManualApprovalCommand,
    12: OtaUpdateHandleUpdateRequestCommand,
    13: OtaUpdateCheckForUpdatesCommand,
    14: OtaUpdateStartUpdateCommand,
    15: AccountLinkCommand,
    16: AccountUnlinkCommand,
    17: SetRfTxPinCommand,
    18: SetEstopEnabledCommand,
    19: SetEstopPinCommand};

  static const fb.Reader<LocalToHubMessagePayloadTypeId> reader = _LocalToHubMessagePayloadTypeIdReader();

  @override
  String toString() {
    return 'LocalToHubMessagePayloadTypeId{value: $value}';
  }
}

class _LocalToHubMessagePayloadTypeIdReader extends fb.Reader<LocalToHubMessagePayloadTypeId> {
  const _LocalToHubMessagePayloadTypeIdReader();

  @override
  int get size => 1;

  @override
  LocalToHubMessagePayloadTypeId read(fb.BufferContext bc, int offset) =>
      LocalToHubMessagePayloadTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class WifiScanCommand {
  WifiScanCommand._(this._bc, this._bcOffset);
  factory WifiScanCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiScanCommand> reader = _WifiScanCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get run => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'WifiScanCommand{run: ${run}}';
  }
}

class _WifiScanCommandReader extends fb.TableReader<WifiScanCommand> {
  const _WifiScanCommandReader();

  @override
  WifiScanCommand createObject(fb.BufferContext bc, int offset) => 
    WifiScanCommand._(bc, offset);
}

class WifiScanCommandBuilder {
  WifiScanCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRun(bool? run) {
    fbBuilder.addBool(0, run);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiScanCommandObjectBuilder extends fb.ObjectBuilder {
  final bool? _run;

  WifiScanCommandObjectBuilder({
    bool? run,
  })
      : _run = run;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _run);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WifiNetworkSaveCommand {
  WifiNetworkSaveCommand._(this._bc, this._bcOffset);
  factory WifiNetworkSaveCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiNetworkSaveCommand> reader = _WifiNetworkSaveCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ssid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get password => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get connect => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'WifiNetworkSaveCommand{ssid: ${ssid}, password: ${password}, connect: ${connect}}';
  }
}

class _WifiNetworkSaveCommandReader extends fb.TableReader<WifiNetworkSaveCommand> {
  const _WifiNetworkSaveCommandReader();

  @override
  WifiNetworkSaveCommand createObject(fb.BufferContext bc, int offset) => 
    WifiNetworkSaveCommand._(bc, offset);
}

class WifiNetworkSaveCommandBuilder {
  WifiNetworkSaveCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSsidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPasswordOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addConnect(bool? connect) {
    fbBuilder.addBool(2, connect);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiNetworkSaveCommandObjectBuilder extends fb.ObjectBuilder {
  final String? _ssid;
  final String? _password;
  final bool? _connect;

  WifiNetworkSaveCommandObjectBuilder({
    String? ssid,
    String? password,
    bool? connect,
  })
      : _ssid = ssid,
        _password = password,
        _connect = connect;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ssidOffset = _ssid == null ? null
        : fbBuilder.writeString(_ssid!);
    final int? passwordOffset = _password == null ? null
        : fbBuilder.writeString(_password!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, ssidOffset);
    fbBuilder.addOffset(1, passwordOffset);
    fbBuilder.addBool(2, _connect);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WifiNetworkForgetCommand {
  WifiNetworkForgetCommand._(this._bc, this._bcOffset);
  factory WifiNetworkForgetCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiNetworkForgetCommand> reader = _WifiNetworkForgetCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ssid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'WifiNetworkForgetCommand{ssid: ${ssid}}';
  }
}

class _WifiNetworkForgetCommandReader extends fb.TableReader<WifiNetworkForgetCommand> {
  const _WifiNetworkForgetCommandReader();

  @override
  WifiNetworkForgetCommand createObject(fb.BufferContext bc, int offset) => 
    WifiNetworkForgetCommand._(bc, offset);
}

class WifiNetworkForgetCommandBuilder {
  WifiNetworkForgetCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addSsidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiNetworkForgetCommandObjectBuilder extends fb.ObjectBuilder {
  final String? _ssid;

  WifiNetworkForgetCommandObjectBuilder({
    String? ssid,
  })
      : _ssid = ssid;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ssidOffset = _ssid == null ? null
        : fbBuilder.writeString(_ssid!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, ssidOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WifiNetworkConnectCommand {
  WifiNetworkConnectCommand._(this._bc, this._bcOffset);
  factory WifiNetworkConnectCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiNetworkConnectCommand> reader = _WifiNetworkConnectCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ssid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'WifiNetworkConnectCommand{ssid: ${ssid}}';
  }
}

class _WifiNetworkConnectCommandReader extends fb.TableReader<WifiNetworkConnectCommand> {
  const _WifiNetworkConnectCommandReader();

  @override
  WifiNetworkConnectCommand createObject(fb.BufferContext bc, int offset) => 
    WifiNetworkConnectCommand._(bc, offset);
}

class WifiNetworkConnectCommandBuilder {
  WifiNetworkConnectCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addSsidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiNetworkConnectCommandObjectBuilder extends fb.ObjectBuilder {
  final String? _ssid;

  WifiNetworkConnectCommandObjectBuilder({
    String? ssid,
  })
      : _ssid = ssid;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ssidOffset = _ssid == null ? null
        : fbBuilder.writeString(_ssid!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, ssidOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WifiNetworkDisconnectCommand {
  WifiNetworkDisconnectCommand._(this._bc, this._bcOffset);
  factory WifiNetworkDisconnectCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiNetworkDisconnectCommand> reader = _WifiNetworkDisconnectCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get placeholder => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'WifiNetworkDisconnectCommand{placeholder: ${placeholder}}';
  }
}

class _WifiNetworkDisconnectCommandReader extends fb.TableReader<WifiNetworkDisconnectCommand> {
  const _WifiNetworkDisconnectCommandReader();

  @override
  WifiNetworkDisconnectCommand createObject(fb.BufferContext bc, int offset) => 
    WifiNetworkDisconnectCommand._(bc, offset);
}

class WifiNetworkDisconnectCommandBuilder {
  WifiNetworkDisconnectCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPlaceholder(bool? placeholder) {
    fbBuilder.addBool(0, placeholder);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiNetworkDisconnectCommandObjectBuilder extends fb.ObjectBuilder {
  final bool? _placeholder;

  WifiNetworkDisconnectCommandObjectBuilder({
    bool? placeholder,
  })
      : _placeholder = placeholder;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _placeholder);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateSetIsEnabledCommand {
  OtaUpdateSetIsEnabledCommand._(this._bc, this._bcOffset);
  factory OtaUpdateSetIsEnabledCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateSetIsEnabledCommand> reader = _OtaUpdateSetIsEnabledCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get enabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'OtaUpdateSetIsEnabledCommand{enabled: ${enabled}}';
  }
}

class _OtaUpdateSetIsEnabledCommandReader extends fb.TableReader<OtaUpdateSetIsEnabledCommand> {
  const _OtaUpdateSetIsEnabledCommandReader();

  @override
  OtaUpdateSetIsEnabledCommand createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateSetIsEnabledCommand._(bc, offset);
}

class OtaUpdateSetIsEnabledCommandBuilder {
  OtaUpdateSetIsEnabledCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addEnabled(bool? enabled) {
    fbBuilder.addBool(0, enabled);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateSetIsEnabledCommandObjectBuilder extends fb.ObjectBuilder {
  final bool? _enabled;

  OtaUpdateSetIsEnabledCommandObjectBuilder({
    bool? enabled,
  })
      : _enabled = enabled;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _enabled);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateSetDomainCommand {
  OtaUpdateSetDomainCommand._(this._bc, this._bcOffset);
  factory OtaUpdateSetDomainCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateSetDomainCommand> reader = _OtaUpdateSetDomainCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get domain => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'OtaUpdateSetDomainCommand{domain: ${domain}}';
  }
}

class _OtaUpdateSetDomainCommandReader extends fb.TableReader<OtaUpdateSetDomainCommand> {
  const _OtaUpdateSetDomainCommandReader();

  @override
  OtaUpdateSetDomainCommand createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateSetDomainCommand._(bc, offset);
}

class OtaUpdateSetDomainCommandBuilder {
  OtaUpdateSetDomainCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addDomainOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateSetDomainCommandObjectBuilder extends fb.ObjectBuilder {
  final String? _domain;

  OtaUpdateSetDomainCommandObjectBuilder({
    String? domain,
  })
      : _domain = domain;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? domainOffset = _domain == null ? null
        : fbBuilder.writeString(_domain!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, domainOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateSetUpdateChannelCommand {
  OtaUpdateSetUpdateChannelCommand._(this._bc, this._bcOffset);
  factory OtaUpdateSetUpdateChannelCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateSetUpdateChannelCommand> reader = _OtaUpdateSetUpdateChannelCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get channel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'OtaUpdateSetUpdateChannelCommand{channel: ${channel}}';
  }
}

class _OtaUpdateSetUpdateChannelCommandReader extends fb.TableReader<OtaUpdateSetUpdateChannelCommand> {
  const _OtaUpdateSetUpdateChannelCommandReader();

  @override
  OtaUpdateSetUpdateChannelCommand createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateSetUpdateChannelCommand._(bc, offset);
}

class OtaUpdateSetUpdateChannelCommandBuilder {
  OtaUpdateSetUpdateChannelCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addChannelOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateSetUpdateChannelCommandObjectBuilder extends fb.ObjectBuilder {
  final String? _channel;

  OtaUpdateSetUpdateChannelCommandObjectBuilder({
    String? channel,
  })
      : _channel = channel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? channelOffset = _channel == null ? null
        : fbBuilder.writeString(_channel!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, channelOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateSetCheckIntervalCommand {
  OtaUpdateSetCheckIntervalCommand._(this._bc, this._bcOffset);
  factory OtaUpdateSetCheckIntervalCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateSetCheckIntervalCommand> reader = _OtaUpdateSetCheckIntervalCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get interval => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'OtaUpdateSetCheckIntervalCommand{interval: ${interval}}';
  }
}

class _OtaUpdateSetCheckIntervalCommandReader extends fb.TableReader<OtaUpdateSetCheckIntervalCommand> {
  const _OtaUpdateSetCheckIntervalCommandReader();

  @override
  OtaUpdateSetCheckIntervalCommand createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateSetCheckIntervalCommand._(bc, offset);
}

class OtaUpdateSetCheckIntervalCommandBuilder {
  OtaUpdateSetCheckIntervalCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addInterval(int? interval) {
    fbBuilder.addUint16(0, interval);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateSetCheckIntervalCommandObjectBuilder extends fb.ObjectBuilder {
  final int? _interval;

  OtaUpdateSetCheckIntervalCommandObjectBuilder({
    int? interval,
  })
      : _interval = interval;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addUint16(0, _interval);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateSetAllowBackendManagementCommand {
  OtaUpdateSetAllowBackendManagementCommand._(this._bc, this._bcOffset);
  factory OtaUpdateSetAllowBackendManagementCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateSetAllowBackendManagementCommand> reader = _OtaUpdateSetAllowBackendManagementCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get allow => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'OtaUpdateSetAllowBackendManagementCommand{allow: ${allow}}';
  }
}

class _OtaUpdateSetAllowBackendManagementCommandReader extends fb.TableReader<OtaUpdateSetAllowBackendManagementCommand> {
  const _OtaUpdateSetAllowBackendManagementCommandReader();

  @override
  OtaUpdateSetAllowBackendManagementCommand createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateSetAllowBackendManagementCommand._(bc, offset);
}

class OtaUpdateSetAllowBackendManagementCommandBuilder {
  OtaUpdateSetAllowBackendManagementCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addAllow(bool? allow) {
    fbBuilder.addBool(0, allow);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateSetAllowBackendManagementCommandObjectBuilder extends fb.ObjectBuilder {
  final bool? _allow;

  OtaUpdateSetAllowBackendManagementCommandObjectBuilder({
    bool? allow,
  })
      : _allow = allow;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _allow);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateSetRequireManualApprovalCommand {
  OtaUpdateSetRequireManualApprovalCommand._(this._bc, this._bcOffset);
  factory OtaUpdateSetRequireManualApprovalCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateSetRequireManualApprovalCommand> reader = _OtaUpdateSetRequireManualApprovalCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get require => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'OtaUpdateSetRequireManualApprovalCommand{require: ${require}}';
  }
}

class _OtaUpdateSetRequireManualApprovalCommandReader extends fb.TableReader<OtaUpdateSetRequireManualApprovalCommand> {
  const _OtaUpdateSetRequireManualApprovalCommandReader();

  @override
  OtaUpdateSetRequireManualApprovalCommand createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateSetRequireManualApprovalCommand._(bc, offset);
}

class OtaUpdateSetRequireManualApprovalCommandBuilder {
  OtaUpdateSetRequireManualApprovalCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRequire(bool? require) {
    fbBuilder.addBool(0, require);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateSetRequireManualApprovalCommandObjectBuilder extends fb.ObjectBuilder {
  final bool? _require;

  OtaUpdateSetRequireManualApprovalCommandObjectBuilder({
    bool? require,
  })
      : _require = require;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _require);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateHandleUpdateRequestCommand {
  OtaUpdateHandleUpdateRequestCommand._(this._bc, this._bcOffset);
  factory OtaUpdateHandleUpdateRequestCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateHandleUpdateRequestCommand> reader = _OtaUpdateHandleUpdateRequestCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get accept => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'OtaUpdateHandleUpdateRequestCommand{accept: ${accept}}';
  }
}

class _OtaUpdateHandleUpdateRequestCommandReader extends fb.TableReader<OtaUpdateHandleUpdateRequestCommand> {
  const _OtaUpdateHandleUpdateRequestCommandReader();

  @override
  OtaUpdateHandleUpdateRequestCommand createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateHandleUpdateRequestCommand._(bc, offset);
}

class OtaUpdateHandleUpdateRequestCommandBuilder {
  OtaUpdateHandleUpdateRequestCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addAccept(bool? accept) {
    fbBuilder.addBool(0, accept);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateHandleUpdateRequestCommandObjectBuilder extends fb.ObjectBuilder {
  final bool? _accept;

  OtaUpdateHandleUpdateRequestCommandObjectBuilder({
    bool? accept,
  })
      : _accept = accept;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _accept);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateCheckForUpdatesCommand {
  OtaUpdateCheckForUpdatesCommand._(this._bc, this._bcOffset);
  factory OtaUpdateCheckForUpdatesCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateCheckForUpdatesCommand> reader = _OtaUpdateCheckForUpdatesCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get channel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'OtaUpdateCheckForUpdatesCommand{channel: ${channel}}';
  }
}

class _OtaUpdateCheckForUpdatesCommandReader extends fb.TableReader<OtaUpdateCheckForUpdatesCommand> {
  const _OtaUpdateCheckForUpdatesCommandReader();

  @override
  OtaUpdateCheckForUpdatesCommand createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateCheckForUpdatesCommand._(bc, offset);
}

class OtaUpdateCheckForUpdatesCommandBuilder {
  OtaUpdateCheckForUpdatesCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addChannelOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateCheckForUpdatesCommandObjectBuilder extends fb.ObjectBuilder {
  final String? _channel;

  OtaUpdateCheckForUpdatesCommandObjectBuilder({
    String? channel,
  })
      : _channel = channel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? channelOffset = _channel == null ? null
        : fbBuilder.writeString(_channel!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, channelOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OtaUpdateStartUpdateCommand {
  OtaUpdateStartUpdateCommand._(this._bc, this._bcOffset);
  factory OtaUpdateStartUpdateCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OtaUpdateStartUpdateCommand> reader = _OtaUpdateStartUpdateCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get channel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'OtaUpdateStartUpdateCommand{channel: ${channel}, version: ${version}}';
  }
}

class _OtaUpdateStartUpdateCommandReader extends fb.TableReader<OtaUpdateStartUpdateCommand> {
  const _OtaUpdateStartUpdateCommandReader();

  @override
  OtaUpdateStartUpdateCommand createObject(fb.BufferContext bc, int offset) => 
    OtaUpdateStartUpdateCommand._(bc, offset);
}

class OtaUpdateStartUpdateCommandBuilder {
  OtaUpdateStartUpdateCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addChannelOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OtaUpdateStartUpdateCommandObjectBuilder extends fb.ObjectBuilder {
  final String? _channel;
  final String? _version;

  OtaUpdateStartUpdateCommandObjectBuilder({
    String? channel,
    String? version,
  })
      : _channel = channel,
        _version = version;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? channelOffset = _channel == null ? null
        : fbBuilder.writeString(_channel!);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, channelOffset);
    fbBuilder.addOffset(1, versionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AccountLinkCommand {
  AccountLinkCommand._(this._bc, this._bcOffset);
  factory AccountLinkCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountLinkCommand> reader = _AccountLinkCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get code => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'AccountLinkCommand{code: ${code}}';
  }
}

class _AccountLinkCommandReader extends fb.TableReader<AccountLinkCommand> {
  const _AccountLinkCommandReader();

  @override
  AccountLinkCommand createObject(fb.BufferContext bc, int offset) => 
    AccountLinkCommand._(bc, offset);
}

class AccountLinkCommandBuilder {
  AccountLinkCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addCodeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountLinkCommandObjectBuilder extends fb.ObjectBuilder {
  final String? _code;

  AccountLinkCommandObjectBuilder({
    String? code,
  })
      : _code = code;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? codeOffset = _code == null ? null
        : fbBuilder.writeString(_code!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, codeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AccountUnlinkCommand {
  AccountUnlinkCommand._(this._bc, this._bcOffset);
  factory AccountUnlinkCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountUnlinkCommand> reader = _AccountUnlinkCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get placeholder => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'AccountUnlinkCommand{placeholder: ${placeholder}}';
  }
}

class _AccountUnlinkCommandReader extends fb.TableReader<AccountUnlinkCommand> {
  const _AccountUnlinkCommandReader();

  @override
  AccountUnlinkCommand createObject(fb.BufferContext bc, int offset) => 
    AccountUnlinkCommand._(bc, offset);
}

class AccountUnlinkCommandBuilder {
  AccountUnlinkCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPlaceholder(bool? placeholder) {
    fbBuilder.addBool(0, placeholder);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountUnlinkCommandObjectBuilder extends fb.ObjectBuilder {
  final bool? _placeholder;

  AccountUnlinkCommandObjectBuilder({
    bool? placeholder,
  })
      : _placeholder = placeholder;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _placeholder);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SetRfTxPinCommand {
  SetRfTxPinCommand._(this._bc, this._bcOffset);
  factory SetRfTxPinCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SetRfTxPinCommand> reader = _SetRfTxPinCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get pin => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'SetRfTxPinCommand{pin: ${pin}}';
  }
}

class _SetRfTxPinCommandReader extends fb.TableReader<SetRfTxPinCommand> {
  const _SetRfTxPinCommandReader();

  @override
  SetRfTxPinCommand createObject(fb.BufferContext bc, int offset) => 
    SetRfTxPinCommand._(bc, offset);
}

class SetRfTxPinCommandBuilder {
  SetRfTxPinCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPin(int? pin) {
    fbBuilder.addUint8(0, pin);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SetRfTxPinCommandObjectBuilder extends fb.ObjectBuilder {
  final int? _pin;

  SetRfTxPinCommandObjectBuilder({
    int? pin,
  })
      : _pin = pin;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addUint8(0, _pin);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SetEstopEnabledCommand {
  SetEstopEnabledCommand._(this._bc, this._bcOffset);
  factory SetEstopEnabledCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SetEstopEnabledCommand> reader = _SetEstopEnabledCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get enabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'SetEstopEnabledCommand{enabled: ${enabled}}';
  }
}

class _SetEstopEnabledCommandReader extends fb.TableReader<SetEstopEnabledCommand> {
  const _SetEstopEnabledCommandReader();

  @override
  SetEstopEnabledCommand createObject(fb.BufferContext bc, int offset) => 
    SetEstopEnabledCommand._(bc, offset);
}

class SetEstopEnabledCommandBuilder {
  SetEstopEnabledCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addEnabled(bool? enabled) {
    fbBuilder.addBool(0, enabled);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SetEstopEnabledCommandObjectBuilder extends fb.ObjectBuilder {
  final bool? _enabled;

  SetEstopEnabledCommandObjectBuilder({
    bool? enabled,
  })
      : _enabled = enabled;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _enabled);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SetEstopPinCommand {
  SetEstopPinCommand._(this._bc, this._bcOffset);
  factory SetEstopPinCommand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SetEstopPinCommand> reader = _SetEstopPinCommandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get pin => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'SetEstopPinCommand{pin: ${pin}}';
  }
}

class _SetEstopPinCommandReader extends fb.TableReader<SetEstopPinCommand> {
  const _SetEstopPinCommandReader();

  @override
  SetEstopPinCommand createObject(fb.BufferContext bc, int offset) => 
    SetEstopPinCommand._(bc, offset);
}

class SetEstopPinCommandBuilder {
  SetEstopPinCommandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPin(int? pin) {
    fbBuilder.addUint8(0, pin);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SetEstopPinCommandObjectBuilder extends fb.ObjectBuilder {
  final int? _pin;

  SetEstopPinCommandObjectBuilder({
    int? pin,
  })
      : _pin = pin;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addUint8(0, _pin);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LocalToHubMessage {
  LocalToHubMessage._(this._bc, this._bcOffset);
  factory LocalToHubMessage(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LocalToHubMessage> reader = _LocalToHubMessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LocalToHubMessagePayloadTypeId? get payloadType => LocalToHubMessagePayloadTypeId._createOrNull(const fb.Uint8Reader().vTableGetNullable(_bc, _bcOffset, 4));
  dynamic get payload {
    switch (payloadType?.value) {
      case 1: return WifiScanCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 2: return WifiNetworkSaveCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 3: return WifiNetworkForgetCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 4: return WifiNetworkConnectCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 5: return WifiNetworkDisconnectCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 6: return OtaUpdateSetIsEnabledCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 7: return OtaUpdateSetDomainCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 8: return OtaUpdateSetUpdateChannelCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 9: return OtaUpdateSetCheckIntervalCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 10: return OtaUpdateSetAllowBackendManagementCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 11: return OtaUpdateSetRequireManualApprovalCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 12: return OtaUpdateHandleUpdateRequestCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 13: return OtaUpdateCheckForUpdatesCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 14: return OtaUpdateStartUpdateCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 15: return AccountLinkCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 16: return AccountUnlinkCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 17: return SetRfTxPinCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 18: return SetEstopEnabledCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 19: return SetEstopPinCommand.reader.vTableGetNullable(_bc, _bcOffset, 6);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'LocalToHubMessage{payloadType: ${payloadType}, payload: ${payload}}';
  }
}

class _LocalToHubMessageReader extends fb.TableReader<LocalToHubMessage> {
  const _LocalToHubMessageReader();

  @override
  LocalToHubMessage createObject(fb.BufferContext bc, int offset) => 
    LocalToHubMessage._(bc, offset);
}

class LocalToHubMessageBuilder {
  LocalToHubMessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPayloadType(LocalToHubMessagePayloadTypeId? payloadType) {
    fbBuilder.addUint8(0, payloadType?.value);
    return fbBuilder.offset;
  }
  int addPayloadOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LocalToHubMessageObjectBuilder extends fb.ObjectBuilder {
  final LocalToHubMessagePayloadTypeId? _payloadType;
  final dynamic _payload;

  LocalToHubMessageObjectBuilder({
    LocalToHubMessagePayloadTypeId? payloadType,
    dynamic payload,
  })
      : _payloadType = payloadType,
        _payload = payload;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? payloadOffset = _payload?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _payloadType?.value);
    fbBuilder.addOffset(1, payloadOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
