// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library open_shock.serialization.types;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class WifiNetworkEventType {
  final int value;
  const WifiNetworkEventType._(this.value);

  factory WifiNetworkEventType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum WifiNetworkEventType');
    }
    return result;
  }

  static WifiNetworkEventType? _createOrNull(int? value) => 
      value == null ? null : WifiNetworkEventType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 6;
  static bool containsValue(int value) => values.containsKey(value);

  static const WifiNetworkEventType Discovered = WifiNetworkEventType._(0);
  static const WifiNetworkEventType Updated = WifiNetworkEventType._(1);
  static const WifiNetworkEventType Lost = WifiNetworkEventType._(2);
  static const WifiNetworkEventType Saved = WifiNetworkEventType._(3);
  static const WifiNetworkEventType Removed = WifiNetworkEventType._(4);
  static const WifiNetworkEventType Connected = WifiNetworkEventType._(5);
  static const WifiNetworkEventType Disconnected = WifiNetworkEventType._(6);
  static const Map<int, WifiNetworkEventType> values = {
    0: Discovered,
    1: Updated,
    2: Lost,
    3: Saved,
    4: Removed,
    5: Connected,
    6: Disconnected};

  static const fb.Reader<WifiNetworkEventType> reader = _WifiNetworkEventTypeReader();

  @override
  String toString() {
    return 'WifiNetworkEventType{value: $value}';
  }
}

class _WifiNetworkEventTypeReader extends fb.Reader<WifiNetworkEventType> {
  const _WifiNetworkEventTypeReader();

  @override
  int get size => 1;

  @override
  WifiNetworkEventType read(fb.BufferContext bc, int offset) =>
      WifiNetworkEventType.fromValue(const fb.Uint8Reader().read(bc, offset));
}

