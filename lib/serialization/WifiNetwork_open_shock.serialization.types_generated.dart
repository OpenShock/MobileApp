// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library open_shock.serialization.types;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './WifiAuthMode_open_shock.serialization.types_generated.dart'
    as open_shock_serialization_types;
import 'WifiAuthMode_open_shock.serialization.types_generated.dart';

class WifiNetwork {
  WifiNetwork._(this._bc, this._bcOffset);
  factory WifiNetwork(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WifiNetwork> reader = _WifiNetworkReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ssid =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get bssid =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get channel => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get rssi => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0);
  WifiAuthMode get authMode => WifiAuthMode.fromValue(
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 12, 0));
  bool get saved => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);

  @override
  String toString() {
    return 'WifiNetwork{ssid: ${ssid}, bssid: ${bssid}, channel: ${channel}, rssi: ${rssi}, authMode: ${authMode}, saved: ${saved}}';
  }
}

class _WifiNetworkReader extends fb.TableReader<WifiNetwork> {
  const _WifiNetworkReader();

  @override
  WifiNetwork createObject(fb.BufferContext bc, int offset) =>
      WifiNetwork._(bc, offset);
}

class WifiNetworkBuilder {
  WifiNetworkBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addSsidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addBssidOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addChannel(int? channel) {
    fbBuilder.addUint8(2, channel);
    return fbBuilder.offset;
  }

  int addRssi(int? rssi) {
    fbBuilder.addInt8(3, rssi);
    return fbBuilder.offset;
  }

  int addAuthMode(WifiAuthMode? authMode) {
    fbBuilder.addUint8(4, authMode?.value);
    return fbBuilder.offset;
  }

  int addSaved(bool? saved) {
    fbBuilder.addBool(5, saved);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WifiNetworkObjectBuilder extends fb.ObjectBuilder {
  final String? _ssid;
  final String? _bssid;
  final int? _channel;
  final int? _rssi;
  final WifiAuthMode? _authMode;
  final bool? _saved;

  WifiNetworkObjectBuilder({
    String? ssid,
    String? bssid,
    int? channel,
    int? rssi,
    WifiAuthMode? authMode,
    bool? saved,
  })  : _ssid = ssid,
        _bssid = bssid,
        _channel = channel,
        _rssi = rssi,
        _authMode = authMode,
        _saved = saved;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ssidOffset =
        _ssid == null ? null : fbBuilder.writeString(_ssid!);
    final int? bssidOffset =
        _bssid == null ? null : fbBuilder.writeString(_bssid!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, ssidOffset);
    fbBuilder.addOffset(1, bssidOffset);
    fbBuilder.addUint8(2, _channel);
    fbBuilder.addInt8(3, _rssi);
    fbBuilder.addUint8(4, _authMode?.value);
    fbBuilder.addBool(5, _saved);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
